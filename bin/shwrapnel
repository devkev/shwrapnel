

if test -z "$BASH_VERSION"; then
	echo "shwrapnel requires bash"
	exit 1
fi


function shwrapnel {
	local fn="$1"
	shift
	_shwrapnel_$fn "$@"
}

function _shwrapnel_debug {
	[ "x$shwrapnel_verbose" = "xy" -o "x$SHWRAPNEL_DEBUG" = "xy" ] && echo "shwrapnel: $@" 1>&2
}

function _shwrapnel_debug_var {
	eval "shwrapnel debug \"${2:-$1}=\\\"\$$1\\\"\""
}

function _shwrapnel_debug_array {
	local s
	eval s="\${$1[@]}"
	shwrapnel debug_var s "$1"
}

function _shwrapnel_force_message {
	#echo "$shwrapnel_cmdname wrapper: $@"
	echo "$shwrapnel_cmdname: $@"
}

function _shwrapnel_message {
	[ "x$shwrapnel_silent" != "xy" ] && shwrapnel force_message "$@"
}

shwrapnel_warnings=0
function _shwrapnel_warning {
	shwrapnel message "Warning: $@"
	shwrapnel_warnings="$(($shwrapnel_warnings + 1))"
}

function _shwrapnel_error {
	local rc
	rc="$1"
	shift
	shwrapnel force_message "Error: $@"
	exit "$rc"
}


function _shwrapnel_findreal {
	local save_real="${1:-shwrapnel_real}"
	local save_resolve_this="${2:-shwrapnel_resolve_this}"

	local this="${3:-$shwrapnel_fullcmd}"
	shwrapnel debug_var this
	local resolve_this="$(readlink -f "$this")"
	shwrapnel debug_var resolve_this
	local target="${this##*/}"
	shwrapnel debug_var target

	shwrapnel debug_var shwrapnel_${shwrapnel_safe_cmdname}_prevwrap
	IFS=: eval 'local -a prevwrap=(${shwrapnel_'"${shwrapnel_safe_cmdname}"'_prevwrap#:})'
	shwrapnel debug_array prevwrap

	local real=""
	local candidates="$(type -all -path "$target")"
	# Note: this code will break for paths that contain embedded spaces,
	# but correcting that is too much work.
	local i
	for i in $candidates; do
		shwrapnel debug_var i
		local resolve_i="$(readlink -f "$i")"
		shwrapnel debug_var resolve_i
		if [ "$resolve_i" -ef "$resolve_this" ]; then
			continue
		fi

		local found=n
		local j
		for j in "${prevwrap[@]}"; do
			shwrapnel debug_var j
			shwrapnel debug_var resolve_i
			if [ "x$j" = "x$resolve_i" ]; then
				found=y
				break
			fi
		done
		if [ "x$found" = "xn" ]; then
			real="$i"
			break
		fi
	done

	shwrapnel debug_var real
	eval "$save_real=\"$real\""
	eval "$save_resolve_this=\"$resolve_this\""
}


function _shwrapnel_adjust_path_var {
	local var="$1"
	local suffix="$2"
	local fs_suffix="${3:-$suffix}"
	shwrapnel debug "adjust_path_var: var=$var suffix=$suffix fs_suffix=$fs_suffix"

	local new=""

	IFS=: eval 'local -a vals=(${!var})'
	shwrapnel debug_array vals

	local i
	for i in "${vals[@]}"; do
		shwrapnel debug_var i
		if [ "x$i" = "x" ]; then
			i="."
		fi
		local basename="${i%/*}"
		local dirname="${i##*/}"
		shwrapnel debug "adjust_path_var: i=$i basename=$basename dirname=$dirname"
		if [ -d "$basename/$fs_suffix/$dirname" ]; then
			new="$new:$basename/$fs_suffix/$dirname"
			shwrapnel debug "adjust_path_var: found $basename/$fs_suffix/$dirname"
		fi
		if [ -d "$i/$fs_suffix" ]; then
			new="$new:$i/$fs_suffix"
			shwrapnel debug "adjust_path_var: found $i/$fs_suffix"
		fi
		new="$new:$i"
	done
	new="${new#:}"

	# Must take care to not have leading/trailing :, which are interpreted as .
	local special="$(eval "echo \$${var}_$suffix")"
	if [ "x$special" = "x" ]; then
		eval "$var=\"$new\""
	elif [ "x$new" = "x" ]; then
		eval "$var=\"$special\""
	else
		eval "$var=\"$special:$new\""
	fi
	shwrapnel debug_var $var
	export $var
}


function _shwrapnel_convert_path_var_to_cmdline_args {
	local var="$1"
	local flag="$2"
	local resultvar="${3:-opts}"
	shwrapnel debug "convert_path_var_to_cmdline_args var=$var flag=$flag resultvar=$resultvar"

	local -a result
	IFS=: eval 'local -a vals=(${!var})'
	local i
	for i in "${vals[@]}"; do
		shwrapnel debug_var i
		if [ "x$i" = "x" ]; then
			i="."
		fi
		#result[${#result[@]}]="$flag"
		#result[${#result[@]}]="$i"
		result[${#result[@]}]="$flag$i"
	done

	eval "$resultvar="'("${result[@]}")'
	shwrapnel debug_array $resultvar
}


function _shwrapnel_to_var_old {
	local newline='
'
	local maxlinelen="${GRAB_BOTH_MAXLINELEN:-1000}"
	local s="$1='"
	local n="${#s}"
	local extra
	while read -r -d '' -n 1; do
		if [ x"$REPLY" = x"'" ]; then
			REPLY="'\"'\"'"
		fi
		if [ "$n" -gt "$(( $maxlinelen - ${#REPLY} ))" ]; then
			s="$s'$newline"
			extra="$1=\"\$$1\"'"
			s="$s$extra"
			n="${#extra}"
		fi
		s="$s$REPLY"
		n="$(( $n + ${#REPLY} ))"
	done
	s="$s'"
	echo "$s"
}

function _shwrapnel_to_var {
	local newline='
'
	# the extra 256 is in case of quotes.
	local slack="$(( ${#1} - 5 - ${GRAB_BOTH_SLACK:-256} ))"
	local maxlinelen="$(( ${GRAB_BOTH_MAXLINELEN:-4096} - $slack ))"
	if [ "$maxlinelen" -lt "$slack" ]; then
		maxlinelen="$slack"
	fi
	local protectedquote="'"\""'"\""'"
	local s="$1=$newline"
	while read -r -d '' -n "$maxlinelen"; do
		s+="$1+='${REPLY//\'/$protectedquote}'$newline"
	done
	echo "$s$1+='${REPLY//\'/$protectedquote}'"
}

function _shwrapnel_grab_both {
	local oname="$1" ; shift
	local ename="$1" ; shift
	local grab_both_rc
	eval "$(
		{
			{
				#"$@" | shwrapnel to_var_old "$oname" >&3
				#"$@" | sed -e "s/'/'\''/g" | shwrapnel to_var "$oname" >&3
				"$@" | shwrapnel to_var "$oname" >&3
				echo "grab_both_rc='${PIPESTATUS[0]}'" >&3
			#} 2>&1 | shwrapnel to_var_old "$ename"
			#} 2>&1 | sed -e "s/'/'\''/g" | shwrapnel to_var "$ename"
			} 2>&1 | shwrapnel to_var "$ename"
		} 3>&1
	)"
	return $grab_both_rc
}



function _shwrapnel_do_launch {
	shwrapnel debug exec "$@"                                                                                                          
	exec "$@"                                                                                                          
}



function _shwrapnel_launch {
	# The most common case of not needing to munge up the args
	shwrapnel do_launch "$shwrapnel_real" "${shwrapnel_orig_args[@]}"
}

function _shwrapnel_launch_prepend {
	# The next most common case of just prepending extra args
	shwrapnel do_launch "$shwrapnel_real" "$@" "${shwrapnel_orig_args[@]}"
}

function _shwrapnel_launch_append {
	# The next most common case of just appending extra args
	shwrapnel do_launch "$shwrapnel_real" "${shwrapnel_orig_args[@]}" "$@"
}




shwrapnel_fullcmd="$0"
shwrapnel debug_var shwrapnel_fullcmd
shwrapnel_cmdname="${shwrapnel_fullcmd##*/}"
shwrapnel debug_var shwrapnel_cmdname
# FIXME: remove fork
shwrapnel_safe_cmdname="$(sed -e 's/[^A-Za-z0-9_]/_/g' <<< "$shwrapnel_cmdname")"
shwrapnel debug_var shwrapnel_safe_cmdname

eval shwrapnel_verbose="\${${shwrapnel_safe_cmdname}_wrapper_verbose:-n}"
shwrapnel_verbose="${shwrapnel_verbose:-y}"

eval shwrapnel_silent="\${${shwrapnel_safe_cmdname}_wrapper_silent:-n}"
shwrapnel_silent="${shwrapnel_silent:-y}"

declare -a shwrapnel_orig_args
shwrapnel_orig_args=("$@")
shwrapnel debug_array shwrapnel_orig_args


shwrapnel findreal shwrapnel_real shwrapnel_resolve_this
if [ "x$shwrapnel_real" = "x" ]; then
	shwrapnel error 1 "shwrapnel: Error: Unable to find the 'real' $shwrapnel_cmdname" 1>&2
fi


shwrapnel debug_var shwrapnel_resolve_this
eval "shwrapnel_${shwrapnel_safe_cmdname}_prevwrap=\"\${shwrapnel_${shwrapnel_safe_cmdname}_prevwrap}:\$shwrapnel_resolve_this\""
export shwrapnel_${shwrapnel_safe_cmdname}_prevwrap
shwrapnel debug_var shwrapnel_${shwrapnel_safe_cmdname}_prevwrap

eval shwrapnel_xloop="\${shwrapnel_${shwrapnel_safe_cmdname}_xloop:-0}"
shwrapnel debug_var shwrapnel_xloop
if [ "$shwrapnel_xloop" -eq "$$" ]; then
	shwrapnel debug "Wrapper has already been run, short-circuiting" 1>&2
	shwrapnel launch
fi
export shwrapnel_${shwrapnel_safe_cmdname}_xloop=$$
shwrapnel debug_var shwrapnel_${shwrapnel_safe_cmdname}_xloop




# vim:syntax=sh:ai:si:

